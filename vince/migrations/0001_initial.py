# Generated by Django 2.2.26 on 2022-05-13 14:05

import bigvince.storage_backends
import datetime
from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid
import vince.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date')),
                ('last_edit', models.DateTimeField(blank=True, null=True, verbose_name='Last Modified Date')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='Title')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('new_status', models.IntegerField(blank=True, choices=[(1, 'Open'), (2, 'Reopened'), (3, 'Resolved'), (4, 'Closed'), (5, 'Duplicate')], help_text='If the status was changed, what was it changed to?', null=True, verbose_name='New Status')),
            ],
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, help_text='The type of data, a product name, an exploit, CVSS, etc.', max_length=200, null=True)),
                ('title', models.CharField(help_text='A title for this value that could be used in a report or vul note.', max_length=200)),
                ('value', models.CharField(help_text='The artifact that you want to document.', max_length=500)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(blank=True, help_text='A description of this artifact.', max_length=200, null=True)),
                ('added_to_note', models.BooleanField(default=False, help_text='If artifact has been added to vulnote')),
                ('added_to_post', models.BooleanField(default=False, help_text='If artifact has been added to vendor notification')),
                ('user', models.ForeignKey(blank=True, help_text='The user that added this artifact.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=1000, storage=bigvince.storage_backends.PrivateMediaStorage(), upload_to='', verbose_name='File')),
                ('filename', models.CharField(max_length=1000, verbose_name='Filename')),
                ('mime_type', models.CharField(max_length=255, verbose_name='MIME Type')),
                ('size', models.IntegerField(help_text='Size of this file in bytes', verbose_name='Size')),
                ('public', models.BooleanField(default=False)),
                ('action', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Action', verbose_name='Action')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'ordering': ('filename',),
            },
        ),
        migrations.CreateModel(
            name='CaseTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(max_length=200)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('vendor_email', models.TextField(default='We have new information about a vulnerability that may affect your products. Please login to the VINCE portal for more information about this vulnerability.', help_text='The context available to you includes {{ vu }}, {{ title }}, and {{ owner }}.', verbose_name='Vendor Notification Email Content')),
                ('participant_email', models.TextField(default='Hello, you have been invited you to participate in an active vulnerability disclosure case. Please login to the VINCE portal for more information about this case.', help_text='The context available to you includes {{ vu }}, {{ title }}, and {{ owner }}.', verbose_name='Participant Notification Email Content')),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_id', models.CharField(blank=True, max_length=10, null=True)),
                ('vendor_name', models.CharField(max_length=100)),
                ('vendor_type', models.CharField(choices=[('Contact', 'Contact'), ('Vendor', 'Vendor')], default='Vendor', max_length=50)),
                ('srmail_peer', models.CharField(blank=True, max_length=100, null=True)),
                ('srmail_salutation', models.CharField(blank=True, max_length=100, null=True)),
                ('srmail_id', models.IntegerField(blank=True, null=True)),
                ('lotus_id', models.IntegerField(blank=True, null=True)),
                ('countrycode', django_countries.fields.CountryField(blank=True, default='US', max_length=2, null=True)),
                ('active', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', models.CharField(choices=[('Domestic', 'Domestic'), ('International', 'International')], default='domestic', max_length=15)),
                ('comment', models.TextField(blank=True, null=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('version', models.IntegerField(default=0)),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContactGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('vuid', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(max_length=250)),
                ('srmail_peer_name', models.CharField(max_length=50)),
                ('group_type', models.CharField(choices=[('srmail', 'SRMail List'), ('vendorlist', 'Vendor Contact List')], default='srmail', max_length=20)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive'), ('Unknown', 'Unknown')], default='Active', max_length=20)),
                ('comment', models.TextField(blank=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('version', models.IntegerField(default=0)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('email_type', models.CharField(choices=[('Work', 'Work'), ('Other', 'Other'), ('Home', 'Home'), ('School', 'School')], default='Work', max_length=20)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('email_function', models.CharField(choices=[('TO', 'TO'), ('CC', 'CC'), ('EMAIL', 'EMAIL'), ('REPLYTO', 'REPLYTO')], default='TO', max_length=10)),
                ('status', models.BooleanField(default=True)),
                ('version', models.IntegerField(default=0)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=100, verbose_name='Template Name')),
                ('subject', models.CharField(help_text='This will be prefixed with "[ticket.ticket] ticket.title". We recommend something simple such as "(Updated") or "(Closed)" - the same context is available as in plain_text, below.', max_length=100, verbose_name='Subject')),
                ('heading', models.CharField(help_text='In HTML e-mails, this will be the heading at the top of the email - the same context is available as in plain_text, below.', max_length=100, verbose_name='Heading')),
                ('plain_text', models.TextField(help_text='The context available to you includes {{ ticket }}, {{ queue }}, and depending on the time of the call: {{ resolution }} or {{ comment }}.', verbose_name='Plain Text')),
                ('html', models.TextField(help_text='The same context is available here as in plain_text, above.', verbose_name='HTML')),
                ('locale', models.CharField(blank=True, help_text='Locale of this template.', max_length=10, null=True, verbose_name='Locale')),
                ('body_only', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'e-mail template',
                'verbose_name_plural': 'e-mail templates',
                'ordering': ('template_name', 'locale'),
            },
        ),
        migrations.CreateModel(
            name='FollowupMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.IntegerField(verbose_name='VinceComm Msg ID')),
            ],
        ),
        migrations.CreateModel(
            name='GroupDuplicate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.ContactGroup')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('created', models.DateTimeField(blank=True, help_text='Date this ticket was first created', verbose_name='Created')),
                ('modified', models.DateTimeField(blank=True, help_text='Date this ticket was most recently changed.', verbose_name='Modified')),
                ('submitter_email', models.EmailField(blank=True, help_text='The submitter will receive an email for all public follow-ups left for this task.', max_length=254, null=True, verbose_name='Submitter E-Mail')),
                ('status', models.IntegerField(choices=[(1, 'Open'), (2, 'Reopened'), (3, 'Resolved'), (4, 'Closed'), (5, 'Duplicate')], default=1, verbose_name='Status')),
                ('on_hold', models.BooleanField(blank=True, default=False, help_text='If a ticket is on hold, it will not automatically be escalated.', verbose_name='On Hold')),
                ('description', models.TextField(blank=True, help_text='The content of the customers query.', null=True, verbose_name='Description')),
                ('resolution', models.TextField(blank=True, help_text='The resolution provided to the customer by our staff.', null=True, verbose_name='Resolution')),
                ('priority', models.IntegerField(blank=3, choices=[(1, '1. Critical'), (2, '2. High'), (3, '3. Normal'), (4, '4. Low'), (5, '5. Very Low')], default=3, help_text='1 = Highest Priority, 5 = Low Priority', verbose_name='Priority')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due on')),
                ('close_reason', models.IntegerField(choices=[(1, 'Opened Case'), (2, 'Task Complete'), (3, 'Spam'), (4, 'Decline'), (5, 'Decline, already fixed'), (6, 'Decline, vendor not contacted'), (7, 'Decline, vendor cooperating'), (8, 'Decline, live website vul'), (9, 'Forward')], default=1)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned to')),
            ],
        ),
        migrations.CreateModel(
            name='TicketChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=100, verbose_name='Field')),
                ('old_value', models.TextField(blank=True, null=True, verbose_name='Old Value')),
                ('new_value', models.TextField(blank=True, null=True, verbose_name='New Value')),
            ],
            options={
                'verbose_name': 'Ticket change',
                'verbose_name_plural': 'Ticket changes',
            },
        ),
        migrations.CreateModel(
            name='TicketThread',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket', models.IntegerField(verbose_name='VinceTrack Ticket ID')),
                ('thread', models.IntegerField(verbose_name='VinceComm Thread ID')),
            ],
        ),
        migrations.CreateModel(
            name='VendorContactData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(max_length=250)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=50, null=True)),
                ('other_emails', models.CharField(blank=True, max_length=1000, null=True)),
                ('person', models.CharField(max_length=250)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VendorNotificationEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(help_text='The subject of the email.', max_length=200)),
                ('email_body', models.TextField(blank=True, default='We have new information about a vulnerability that may affect your products. Please login to the VINCE portal for more information about this vulnerability.', help_text='The body of the email that will be sent to vendors to notify them to login to VINCE. ', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VinceSQS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_polled', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.CharField(max_length=200)),
                ('date_submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('vrf_id', models.CharField(max_length=20)),
                ('read', models.BooleanField(default=False)),
                ('receipt_handle', models.CharField(blank=True, max_length=500, null=True)),
                ('deleted_from_queue', models.BooleanField(default=False)),
                ('report_type', models.IntegerField(choices=[(1, 'VRF'), (2, 'Vendor Statement'), (3, 'Gov Report')], default=1, verbose_name='Report Type')),
                ('attached_file', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VulnerabilityCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vuid', models.CharField(max_length=20)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(blank=True, help_text='Date this case was most recently changed.', null=True, verbose_name='Modified')),
                ('on_hold', models.BooleanField(blank=True, default=False, help_text='If a case is on hold, it will not automatically be escalated.', verbose_name='On Hold')),
                ('status', models.IntegerField(choices=[(1, 'Active'), (2, 'Inactive')], default=1, verbose_name='Status')),
                ('product_name', models.CharField(help_text='The vulnerable product name/affected website.', max_length=500)),
                ('product_version', models.CharField(blank=True, help_text='The product version that is vulnerable (if available).', max_length=100, null=True)),
                ('summary', models.CharField(help_text='A summary of the vulnerable.  This may be taken from the description in the CaseRequest.', max_length=1000)),
                ('title', models.CharField(help_text='A title for this case.', max_length=500)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('vul_incrementer', models.IntegerField(default=0)),
                ('lotus_notes', models.BooleanField(default=False, help_text='Do not create this case in VinceComm.')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('case_request', models.ForeignKey(blank=True, help_text='The CaseRequest that this is Case is derived from', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket')),
                ('owner', models.ForeignKey(blank=True, help_text='The User that has selected the case for coordination', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, help_text='Changing the template will result in the addition of new tasks to this case. Existing tasks will not be modified.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.CaseTemplate')),
            ],
        ),
        migrations.CreateModel(
            name='VulNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('group_read', models.BooleanField(default=True, verbose_name='group read access')),
                ('group_write', models.BooleanField(default=True, verbose_name='group write access')),
                ('other_read', models.BooleanField(default=True, verbose_name='other read access')),
                ('approved', models.BooleanField(default=False, help_text='Vul note must be approved before publishing')),
                ('date_published', models.DateTimeField(blank=True, null=True)),
                ('date_last_published', models.DateTimeField(blank=True, null=True)),
                ('date_shared', models.DateTimeField(blank=True, null=True)),
                ('revision_shared', models.IntegerField(default=999)),
                ('revision_published', models.IntegerField(default=999)),
                ('case', models.OneToOneField(help_text='The case this vul note belongs with.', on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
            ],
        ),
        migrations.CreateModel(
            name='CaseAction',
            fields=[
                ('action_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Action')),
                ('action_type', models.IntegerField(default=0)),
                ('post', models.IntegerField(blank=True, null=True, verbose_name='VinceComm Post ID')),
            ],
            options={
                'verbose_name': 'Case Action',
                'verbose_name_plural': 'Case Actions',
                'ordering': ('date',),
            },
            bases=('vince.action',),
        ),
        migrations.CreateModel(
            name='CaseArtifact',
            fields=[
                ('artifact_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Artifact')),
            ],
            bases=('vince.artifact',),
        ),
        migrations.CreateModel(
            name='CaseRequest',
            fields=[
                ('ticket_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Ticket')),
                ('vrf_id', models.CharField(max_length=20)),
                ('request_type', models.IntegerField(choices=[(1, 'VRF'), (3, 'GOV')], default=1, verbose_name='Request Type')),
                ('contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_org', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('share_release', models.BooleanField(default=True)),
                ('credit_release', models.BooleanField(default=True)),
                ('comm_attempt', models.BooleanField(blank=True, null=True)),
                ('why_no_attempt', models.CharField(blank=True, max_length=100, null=True)),
                ('please_explain', models.TextField(blank=True, null=True)),
                ('vendor_name', models.CharField(blank=True, max_length=100, null=True)),
                ('multiplevendors', models.BooleanField(default=False)),
                ('other_vendors', models.TextField(blank=True, null=True)),
                ('first_contact', models.DateTimeField(blank=True, null=True)),
                ('vendor_communication', models.TextField(blank=True, null=True)),
                ('product_name', models.CharField(max_length=500)),
                ('product_version', models.CharField(blank=True, max_length=100, null=True)),
                ('vul_description', models.TextField(blank=True, null=True)),
                ('vul_exploit', models.TextField(blank=True, null=True)),
                ('vul_impact', models.TextField(blank=True, null=True)),
                ('vul_discovery', models.TextField(blank=True, null=True)),
                ('vul_public', models.BooleanField(default=False)),
                ('public_references', models.CharField(blank=True, max_length=1000, null=True)),
                ('vul_exploited', models.BooleanField(default=False)),
                ('exploit_references', models.CharField(blank=True, max_length=1000, null=True)),
                ('vul_disclose', models.BooleanField(default=False)),
                ('disclosure_plans', models.CharField(blank=True, max_length=1000, null=True)),
                ('user_file', models.FileField(blank=True, null=True, upload_to=vince.models.update_filename)),
                ('tracking', models.CharField(blank=True, max_length=100, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('date_submitted', models.DateTimeField(default=django.utils.timezone.now)),
                ('submission_type', models.CharField(choices=[('email', 'email'), ('web', 'web'), ('manual', 'manual')], default='web', max_length=15)),
                ('vc_id', models.IntegerField(default=0)),
            ],
            bases=('vince.ticket',),
        ),
        migrations.CreateModel(
            name='FollowUp',
            fields=[
                ('action_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Action')),
            ],
            options={
                'verbose_name': 'Follow-up',
                'verbose_name_plural': 'Follow-ups',
                'ordering': ('date',),
            },
            bases=('vince.action',),
        ),
        migrations.CreateModel(
            name='TicketArtifact',
            fields=[
                ('artifact_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Artifact')),
            ],
            bases=('vince.artifact',),
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('version', models.IntegerField(default=0)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VulNoteRevision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revision_number', models.IntegerField(editable=False, verbose_name='revision number')),
                ('user_message', models.TextField(blank=True)),
                ('automatic_log', models.TextField(blank=True, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('deleted', models.BooleanField(default=False, verbose_name='deleted')),
                ('locked', models.BooleanField(default=False, verbose_name='locked')),
                ('content', models.TextField(blank=True, verbose_name='vulnote contents')),
                ('title', models.CharField(help_text='Each revision contains a title field that must be filled out, even if the title has not changed', max_length=512, verbose_name='vul note title')),
                ('references', models.TextField(blank=True, verbose_name='references')),
                ('date_published', models.DateTimeField(blank=True, null=True)),
                ('date_shared', models.DateTimeField(blank=True, null=True)),
                ('previous_revision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.VulNoteRevision')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('vulnote', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulNote', verbose_name='vulnote')),
            ],
            options={
                'ordering': ('created',),
                'get_latest_by': 'revision_number',
                'unique_together': {('vulnote', 'revision_number')},
            },
        ),
        migrations.AddField(
            model_name='vulnote',
            name='current_revision',
            field=models.OneToOneField(blank=True, help_text='The revision being displayed for this vul note. If you need to rollback, change value of this field.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='current_set', to='vince.VulNoteRevision'),
        ),
        migrations.AddField(
            model_name='vulnote',
            name='group',
            field=models.ForeignKey(blank=True, help_text='Group permissions', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='vulnote',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The owner of this vul note, typically the creator.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='vulnote',
            name='ticket_to_approve',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket'),
        ),
        migrations.CreateModel(
            name='VulnerableVendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(help_text='The name of the vendor that may be affected.', max_length=200)),
                ('added_to_case', models.DateTimeField(blank=True, help_text='The date that this vendor was added to the case.', null=True)),
                ('contact_date', models.DateTimeField(blank=True, help_text='The date that this vendor was first contacted about this vulnerability.', null=True)),
                ('seen', models.BooleanField(default=False, help_text='Has the user logged in to view vuln?')),
                ('references', models.TextField(blank=True, help_text='Vendor references for this case', null=True)),
                ('statement', models.TextField(blank=True, help_text='A general vendor statement for all vuls in the case', null=True)),
                ('addendum', models.TextField(blank=True, help_text='VINCE coordinators added text about this vendor.', null=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('submission_type', models.CharField(choices=[('email', 'email'), ('kb', 'kb'), ('manual', 'manual'), ('vince', 'vince')], default='vince', max_length=15)),
                ('approved', models.BooleanField(default=False, help_text='If all status/statements have been approved.')),
                ('time_approved', models.DateTimeField(blank=True, help_text='The time the statement was approved.', null=True)),
                ('deleted', models.BooleanField(default=False, help_text='This field is only true if a vendor was removed after the vulnote was published')),
                ('share', models.BooleanField(default=False, help_text='Does the vendor give permission to share status/statement pre-publication')),
                ('lotus_id', models.CharField(blank=True, help_text='Old Lotus notes style vendor record ID', max_length=20, null=True)),
                ('added_by', models.ForeignKey(blank=True, help_text='The user that added this vendor to the case', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(help_text='The Case that describes this vulnerability.', on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
                ('contact', models.ForeignKey(help_text='The formal contact information if we have it', on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user_approved', models.ForeignKey(blank=True, help_text='The user that approved this request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_approved', to=settings.AUTH_USER_MODEL)),
                ('vendor_contact', models.ForeignKey(blank=True, help_text='More information about the person that provided the statement', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.VendorContactData')),
            ],
            options={
                'unique_together': {('case', 'contact')},
            },
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve', models.CharField(blank=True, max_length=50, null=True, verbose_name='CVE')),
                ('description', models.TextField(verbose_name='Description')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('ask_vendor_status', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False, help_text='Only present if a vulnerability is deleted after a case has been published.')),
                ('added_to_note', models.BooleanField(default=False)),
                ('added_to_post', models.BooleanField(default=False, help_text='If artifact has been added to vendor notification')),
                ('case_increment', models.IntegerField(default=0)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VulCWE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cwe', models.CharField(max_length=20, verbose_name='CWE')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability')),
            ],
        ),
        migrations.CreateModel(
            name='VendorStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Affected'), (2, 'Unaffected'), (3, 'Unknown')], default=3, help_text='The vendor status. Unknown until vendor says otherwise.')),
                ('user', models.CharField(help_text='The user that responded to the status request.', max_length=30)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('references', models.TextField(blank=True, null=True)),
                ('statement', models.TextField(blank=True, null=True)),
                ('approved', models.BooleanField(default=False)),
                ('time_approved', models.DateTimeField(blank=True, help_text='The time the statement was approved.', null=True)),
                ('user_approved', models.ForeignKey(blank=True, help_text='The user that approved this request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_approve', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerableVendor')),
                ('vul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability')),
            ],
        ),
        migrations.CreateModel(
            name='VendorNotificationContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField(default=0)),
                ('post', models.IntegerField(default=0, help_text='The order of the posts.')),
                ('content', models.CharField(help_text='This will be a pinned post in the vendor case view.', max_length=3000)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False)),
                ('published_date', models.DateTimeField(blank=True, help_text='Datetime when the post was published', null=True)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
                ('user', models.ForeignKey(blank=True, help_text='The user that wrote the notification', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VendorNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date the notification was sent')),
                ('notification', models.ForeignKey(help_text='The content of the message', on_delete=django.db.models.deletion.CASCADE, to='vince.VendorNotificationEmail')),
                ('user', models.ForeignKey(blank=True, help_text='The user that notified', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(help_text='The vendor notified', on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerableVendor')),
            ],
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settings_pickled', models.TextField(blank=True, help_text='This is a base64-encoded representation of a pickled Python dictionary. Do not change this field via the admin.', null=True, verbose_name='Settings Dictionary')),
                ('org', models.CharField(blank=True, max_length=250, null=True)),
                ('preferred_username', models.CharField(blank=True, max_length=250, null=True)),
                ('triage', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='usersettings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Setting',
                'verbose_name_plural': 'User Settings',
            },
        ),
        migrations.CreateModel(
            name='TicketQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('slug', models.SlugField(help_text="This slug is used when building ticket ID's. Once set, try not to change it or e-mailing may get messy.", unique=True, verbose_name='Slug')),
                ('new_ticket_cc', models.CharField(blank=True, help_text='If an e-mail address is entered here, then it will receive notification of all new tickets created for this queue. Enter a comma between multiple e-mail addresses.', max_length=200, null=True, verbose_name='New Ticket CC Address')),
                ('updated_ticket_cc', models.CharField(blank=True, help_text='If an e-mail address is entered here, then it will receive notification of all activity (new tickets, closed tickets, updates, reassignments, etc) for this queue. Separate multiple addresses with a comma.', max_length=200, null=True, verbose_name='Updated Ticket CC Address')),
                ('queue_type', models.IntegerField(choices=[(1, 'General Ticket'), (2, 'Case Request Queue'), (3, 'Case Task Queue')], default=1, verbose_name='Queue Type')),
                ('sqs_url', models.CharField(blank=True, max_length=250, null=True, verbose_name='AWS SQS Queue')),
                ('default_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_owner', to=settings.AUTH_USER_MODEL, verbose_name='Default owner')),
            ],
        ),
        migrations.CreateModel(
            name='TicketDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depends_on', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='depends_on', to='vince.Ticket', verbose_name='Depends On Ticket')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticketdependency', to='vince.Ticket', verbose_name='Ticket')),
            ],
            options={
                'verbose_name': 'Ticket dependency',
                'verbose_name_plural': 'Ticket dependencies',
            },
        ),
        migrations.CreateModel(
            name='TicketCC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, help_text='For non-user followers, enter their e-mail address', max_length=254, null=True, verbose_name='E-Mail Address')),
                ('can_view', models.BooleanField(blank=True, default=False, help_text='Can this CC login to view the ticket details?', verbose_name='Can View Ticket?')),
                ('can_update', models.BooleanField(blank=True, default=False, help_text='Can this CC login and update the ticket?', verbose_name='Can Update Ticket?')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket', verbose_name='Ticket')),
                ('user', models.ForeignKey(blank=True, help_text='User who wishes to receive updates for this ticket.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='ticket',
            name='case',
            field=models.ForeignKey(blank=True, help_text='The case this ticket is associated to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.VulnerabilityCase', verbose_name='Case'),
        ),
        migrations.AddField(
            model_name='ticket',
            name='queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.TicketQueue', verbose_name='Queue'),
        ),
        migrations.CreateModel(
            name='QueuePermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_read', models.BooleanField(default=True, verbose_name='group read access')),
                ('group_write', models.BooleanField(default=True, verbose_name='group write access')),
                ('group', models.ForeignKey(help_text='Group permissions', on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('queue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.TicketQueue', verbose_name='Queue')),
            ],
        ),
        migrations.CreateModel(
            name='PostalAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', django_countries.fields.CountryField(blank=True, default='US', max_length=2, null=True)),
                ('primary', models.BooleanField(default=True)),
                ('address_type', models.CharField(choices=[('Home', 'Home'), ('Work', 'Work'), ('Other', 'Other'), ('School', 'School')], default='Work', max_length=20)),
                ('street', models.CharField(max_length=150)),
                ('street2', models.CharField(blank=True, max_length=150, null=True)),
                ('city', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=40)),
                ('zip_code', models.CharField(max_length=12)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('version', models.IntegerField(default=0)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PhoneContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(default='+1', max_length=5)),
                ('phone', models.CharField(max_length=50)),
                ('phone_type', models.CharField(choices=[('Fax', 'Fax'), ('Home', 'Home'), ('Hotline', 'Hotline'), ('Office', 'Office'), ('Mobile', 'Mobile')], default='Work', max_length=20)),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('version', models.IntegerField(default=0)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attached', models.DateTimeField(default=django.utils.timezone.now)),
                ('attachment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Attachment')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VendorNotificationContent', verbose_name='Notification')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_type', models.CharField(choices=[('Organization', 'Organization'), ('Person', 'Person'), ('Group', 'Group')], default='Organization', max_length=30)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.ContactGroup')),
                ('group_member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.GroupDuplicate')),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.EmailContact')),
            ],
        ),
        migrations.CreateModel(
            name='GroupActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=1500, null=True)),
                ('action', models.IntegerField()),
                ('action_ts', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.ContactGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CVEAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('assigner', models.EmailField(default='test@example.com', max_length=254)),
                ('cve_name', models.CharField(max_length=200, verbose_name='CVE ID')),
                ('references', vince.models.OldJSONField(blank=True, null=True, verbose_name='References')),
                ('source', models.IntegerField(blank=True, choices=[(1, 'INTERNAL'), (2, 'EXTERNAL'), (3, 'USER'), (4, 'UNKNOWN')], null=True)),
                ('description', models.CharField(max_length=500, verbose_name='Description')),
                ('work_around', vince.models.OldJSONField(blank=True, null=True, verbose_name='Workaround')),
                ('resolution', models.CharField(blank=True, max_length=500, null=True, verbose_name='Resolution')),
                ('credit', models.CharField(blank=True, max_length=500, null=True, verbose_name='Credit')),
                ('cwe', vince.models.OldJSONField(blank=True, null=True, verbose_name='CWE')),
                ('date_added', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vul', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Vulnerability')),
            ],
        ),
        migrations.CreateModel(
            name='CVEAffectedProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Affected Product Name')),
                ('version_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Affected Version')),
                ('version_value', models.CharField(max_length=100, verbose_name='Affected Version Value')),
                ('organization', models.CharField(blank=True, max_length=100, null=True, verbose_name='Affected Organization')),
                ('cve', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.CVEAllocation')),
            ],
        ),
        migrations.CreateModel(
            name='ContactPgP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_ts', models.DateTimeField(default=django.utils.timezone.now)),
                ('pgp_key_id', models.CharField(max_length=200)),
                ('pgp_fingerprint', models.CharField(blank=True, max_length=200, null=True)),
                ('pgp_version', models.IntegerField(blank=True, null=True)),
                ('pgp_key_data', models.TextField(blank=True, null=True)),
                ('revoked', models.BooleanField(default=False)),
                ('startdate', models.CharField(blank=True, max_length=12, null=True)),
                ('enddate', models.CharField(blank=True, max_length=12, null=True)),
                ('pgp_protocol', models.CharField(blank=True, max_length=30, null=True)),
                ('version', models.IntegerField(default=0)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='casetemplate',
            name='queue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.TicketQueue', verbose_name='Queue'),
        ),
        migrations.AddField(
            model_name='casetemplate',
            name='user',
            field=models.ForeignKey(blank=True, help_text='The user that created this template.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CaseTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_title', models.CharField(max_length=200, verbose_name='Title')),
                ('task_description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('task_priority', models.IntegerField(choices=[(1, '1. Critical'), (2, '2. High'), (3, '3. Normal'), (4, '4. Low'), (5, '5. Very Low')], default=3, help_text='1 = Highest Priority, 5 = Low Priority', verbose_name='Priority')),
                ('time_to_complete', models.DurationField(default=datetime.timedelta(days=5), verbose_name='Time to complete')),
                ('dependency', models.BooleanField(default=False, help_text='Ticket will be created as a dependency of the case.')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.CaseTemplate')),
            ],
        ),
        migrations.CreateModel(
            name='CasePermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_read', models.BooleanField(default=True, verbose_name='group read access')),
                ('group_write', models.BooleanField(default=True, verbose_name='group write access')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase', verbose_name='Case')),
                ('group', models.ForeignKey(help_text='Group permissions', on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='CaseParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(help_text='The name of the user.', max_length=100)),
                ('added_to_case', models.DateTimeField(default=django.utils.timezone.now, help_text='The date that this user was added to the case.')),
                ('status', models.CharField(blank=True, help_text='Participant status.', max_length=50, null=True)),
                ('coordinator', models.BooleanField(default=False, help_text='Is this user a vulnerability coordinator?')),
                ('added_by', models.ForeignKey(blank=True, help_text='The user that added this vendor to the case', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(help_text='The Case that describes this vulnerability.', on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
            ],
        ),
        migrations.CreateModel(
            name='CaseDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='casedependency', to='vince.VulnerabilityCase', verbose_name='Case')),
                ('depends_on', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='case_depends_on', to='vince.Ticket', verbose_name='Depends On Ticket')),
            ],
            options={
                'verbose_name': 'Case dependency',
                'verbose_name_plural': 'Case dependencies',
            },
        ),
        migrations.CreateModel(
            name='CaseAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attached', models.DateTimeField(default=django.utils.timezone.now)),
                ('attachment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Attachment')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase', verbose_name='Case')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CaseAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
            ],
        ),
        migrations.CreateModel(
            name='ArtifactTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(help_text='A short word or phrase to identify this artifact.', max_length=50)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Artifact')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ArtifactAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Artifact', verbose_name='Artifact')),
                ('attachment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Attachment')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, max_length=1500, null=True)),
                ('action', models.IntegerField()),
                ('action_ts', models.DateTimeField(default=django.utils.timezone.now)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='action',
            name='artifact',
            field=models.ForeignKey(blank=True, help_text='If an artifact was added, reference to artifact.', null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.Artifact'),
        ),
        migrations.AddField(
            model_name='action',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='CaseMessageAction',
            fields=[
                ('caseaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.CaseAction')),
                ('message', models.IntegerField(verbose_name='VinceComm Message ID')),
                ('thread', models.IntegerField(verbose_name='VinceComm Thread ID')),
                ('replied', models.BooleanField(default=False, verbose_name='Is this a reply?')),
            ],
            bases=('vince.caseaction',),
        ),
        migrations.AddIndex(
            model_name='vulnerabilitycase',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='case_gin'),
        ),
        migrations.AddIndex(
            model_name='vulnerability',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='vulnerability_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='vendorstatus',
            unique_together={('vendor', 'vul')},
        ),
        migrations.AlterUniqueTogether(
            name='ticketdependency',
            unique_together={('ticket', 'depends_on')},
        ),
        migrations.AddField(
            model_name='ticketchange',
            name='followup',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.FollowUp', verbose_name='Follow-up'),
        ),
        migrations.AddField(
            model_name='ticketartifact',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='ticket_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='queuepermissions',
            unique_together={('queue', 'group')},
        ),
        migrations.AddField(
            model_name='followupmessage',
            name='followup',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.FollowUp', verbose_name='Follow-up'),
        ),
        migrations.AddField(
            model_name='followup',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket', verbose_name='Ticket'),
        ),
        migrations.AddIndex(
            model_name='cveallocation',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='cve_gin'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='cmgr_gin'),
        ),
        migrations.AlterUniqueTogether(
            name='casepermissions',
            unique_together={('case', 'group')},
        ),
        migrations.AlterUniqueTogether(
            name='casedependency',
            unique_together={('case', 'depends_on')},
        ),
        migrations.AddField(
            model_name='caseartifact',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase'),
        ),
        migrations.AddField(
            model_name='caseaction',
            name='case',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase', verbose_name='Case'),
        ),
        migrations.AddField(
            model_name='caseaction',
            name='notification',
            field=models.ForeignKey(blank=True, help_text='What notification was sent?', null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.VendorNotificationContent'),
        ),
        migrations.AddField(
            model_name='caseaction',
            name='vendor',
            field=models.ForeignKey(blank=True, help_text='What vendor was involved in the change?', null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerableVendor'),
        ),
        migrations.AddField(
            model_name='caseaction',
            name='vulnote',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.VulNoteRevision'),
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS ticket_update_trigger\n            ON vince_ticket;\n            ',
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER ticket_update_trigger\n            BEFORE INSERT OR UPDATE of title, description, search_vector\n            ON vince_ticket\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', title, description);\n\n            UPDATE vince_ticket SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS ticket_update_trigger\n            ON vince_ticket;\n            ',
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS case_update_trigger\n            ON vince_vulnerabilitycase;\n            ',
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER case_update_trigger\n            BEFORE INSERT OR UPDATE of vuid, title, summary, product_name, product_version, search_vector\n            ON vince_vulnerabilitycase\n\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', vuid, title, summary, product_name, product_version);\n            UPDATE vince_vulnerabilitycase SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS case_update_trigger\n            ON vince_vulnerabilitycase;\n            ',
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS cmgr_update_trigger\n            ON vince_contact;\n            ',
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER cmgr_update_trigger\n            BEFORE INSERT OR UPDATE of vendor_name, srmail_peer, srmail_salutation, countrycode,  search_vector\n\n            ON vince_contact\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', vendor_name, srmail_peer, srmail_salutation, countrycode);\n            UPDATE vince_contact SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS cmgr_update_trigger\n            ON vince_contact;\n            ',
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS cve_update_trigger\n            ON vince_cveallocation;\n            ',
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER cve_update_trigger\n            BEFORE INSERT OR UPDATE of title, assigner, cve_name, description, resolution, credit, search_vector\n\n            ON vince_cveallocation\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', title, assigner, cve_name, description, resolution, credit);\n            UPDATE vince_cveallocation SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS cve_update_trigger\n            ON vince_cveallocation;\n            ',
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS vulnerability_update_trigger\n            ON vince_vulnerability;\n            ',
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER vulnerability_update_trigger\n            BEFORE INSERT OR UPDATE of cve, description, search_vector\n\n            ON vince_vulnerability\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', cve, description);\n            UPDATE vince_vulnerability SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS vulnerability_update_trigger\n            ON vince_vulnerability;\n            ',
        ),
        migrations.AlterField(
            model_name='caserequest',
            name='user_file',
            field=models.FileField(blank=True, null=True, storage=bigvince.storage_backends.PrivateMediaStorage(), upload_to=vince.models.update_filename),
        ),
        migrations.AddField(
            model_name='emailcontact',
            name='email_list',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='vulnerablevendor',
            name='statement_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='vulnerabilitycase',
            name='publicdate',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='caseparticipant',
            name='added_to_case',
            field=models.DateTimeField(blank=True, help_text='The date that this user was added to the case.', null=True),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='close_reason',
            field=models.IntegerField(choices=[(1, 'Opened Case'), (2, 'Task Complete'), (3, 'Spam'), (4, 'Decline'), (5, 'Decline, already fixed'), (6, 'Decline, vendor not contacted'), (7, 'Decline, vendor cooperating'), (8, 'Decline, live website vul'), (9, 'Forward')], default=2),
        ),
        migrations.AlterField(
            model_name='vendorstatus',
            name='user',
            field=models.CharField(help_text='The user that responded to the status request.', max_length=200),
        ),
        migrations.AddField(
            model_name='vulnerablevendor',
            name='approve_ticket',
            field=models.OneToOneField(blank=True, help_text='The ticket to approve this vendor', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approve_vendor', to='vince.Ticket'),
        ),
        migrations.AlterField(
            model_name='vendorstatus',
            name='status',
            field=models.IntegerField(choices=[(1, 'Affected'), (2, 'Not Affected'), (3, 'Unknown')], default=3, help_text='The vendor status. Unknown until vendor says otherwise.'),
        ),
        migrations.AlterModelOptions(
            name='vendorstatus',
            options={'verbose_name_plural': 'Vendor Statuses'},
        ),
        migrations.AlterField(
            model_name='vulnerabilitycase',
            name='due_date',
            field=models.DateTimeField(blank=True, help_text='Estimated Public Date', null=True),
        ),
        migrations.AlterModelOptions(
            name='ticket',
            options={},
        ),
        migrations.AlterField(
            model_name='ticket',
            name='submitter_email',
            field=models.CharField(blank=True, help_text='The submitter will receive an email for all public follow-ups left for this task.', max_length=300, null=True, verbose_name='Submitter E-Mail'),
        ),
        migrations.AlterField(
            model_name='contactpgp',
            name='pgp_protocol',
            field=models.CharField(default='GPG1 ARMOR MIME', max_length=30),
        ),
        migrations.AlterField(
            model_name='action',
            name='title',
            field=models.CharField(blank=True, max_length=300, null=True, verbose_name='Title'),
        ),
        migrations.AddField(
            model_name='contact',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AddField(
            model_name='vulnerabilitycase',
            name='publicurl',
            field=models.CharField(blank=True, help_text='The URL for the public notice of a vulnerability.', max_length=500, null=True, verbose_name='Public URL'),
        ),
        migrations.CreateModel(
            name='AdminPGPEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pgp_key_data', models.TextField(default=1)),
                ('pgp_key_id', models.CharField(max_length=200)),
                ('email', models.CharField(help_text='Multiple emails should be separated by a comma only (no space)', max_length=254, verbose_name='Email(s)')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.AddField(
            model_name='vulnerabilitycase',
            name='changes_to_publish',
            field=models.BooleanField(default=False, help_text='Switch to True if changes to case require publishing'),
        ),
        migrations.AlterField(
            model_name='action',
            name='new_status',
            field=models.IntegerField(blank=True, choices=[(1, 'Open'), (2, 'Reopened'), (3, 'Resolved'), (4, 'Closed'), (5, 'Duplicate'), (6, 'In progress')], help_text='If the status was changed, what was it changed to?', null=True, verbose_name='New Status'),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='status',
            field=models.IntegerField(choices=[(1, 'Open'), (2, 'Reopened'), (3, 'Resolved'), (4, 'Closed'), (5, 'Duplicate'), (6, 'In progress')], default=1, verbose_name='Status'),
        ),
        migrations.CreateModel(
            name='TicketContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact', models.ForeignKey(help_text='The contact associated with this ticket.', on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket', verbose_name='Ticket')),
            ],
        ),
        migrations.AddField(
            model_name='caseparticipant',
            name='group',
            field=models.BooleanField(default=False, help_text='Is this a vendor or a group?'),
        ),
        migrations.AlterField(
            model_name='vendornotificationcontent',
            name='content',
            field=models.TextField(help_text='This will be a pinned post in the vendor case view.'),
        ),
        migrations.AddField(
            model_name='vendornotification',
            name='emails',
            field=models.CharField(blank=True, help_text='A comma separated list of the emails that was sent this message', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='attachment',
            name='file',
            field=models.FileField(max_length=1000, storage=bigvince.storage_backends.PrivateMediaStorage(), upload_to=vince.models.get_uuid_filename, verbose_name='File'),
        ),
        migrations.CreateModel(
            name='CognitoUserAction',
            fields=[
                ('action_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='vince.Action')),
                ('email', models.EmailField(help_text='The email address of the cognito user', max_length=254)),
            ],
            bases=('vince.action',),
        ),
        migrations.AddField(
            model_name='attachment',
            name='uuid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.CreateModel(
            name='VinceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.VulnerabilityCase', verbose_name='Case')),
                ('vulnote', models.BooleanField(default=False)),
                ('comm_id', models.IntegerField(default=0, verbose_name='VinceComm VinceTrackAttachment ID')),
                ('filename', models.CharField(default='filename', max_length=500)),
                ('to_remove', models.BooleanField(default=False)),
            ],
        ),
        migrations.AlterField(
            model_name='action',
            name='artifact',
            field=models.ForeignKey(blank=True, help_text='If an artifact was added, reference to artifact.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Artifact'),
        ),
        migrations.CreateModel(
            name='VinceSMIMECertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='The email that belongs to the certificate', max_length=254)),
                ('certificate', models.FileField(storage=bigvince.storage_backends.PrivateMediaStorage(location='certs'), upload_to='', verbose_name='Certificate')),
            ],
        ),
        migrations.CreateModel(
            name='VinceEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to', models.CharField(help_text='The email address(es).  Multiple emails should be separated by a comma.', max_length=1000)),
                ('pgp_key_id', models.CharField(blank=True, max_length=50, null=True)),
                ('email_type', models.IntegerField(choices=[(1, 'Regular'), (2, 'PgP'), (3, 'S/MIME')], default=1)),
                ('certificate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.VinceSMIMECertificate')),
                ('notification', models.ForeignKey(help_text='The subject/content of the message', on_delete=django.db.models.deletion.CASCADE, to='vince.VendorNotificationEmail')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket', verbose_name='Ticket')),
                ('user', models.ForeignKey(blank=True, help_text='The user that is sending the email.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='contactpgp',
            name='pgp_email',
            field=models.EmailField(blank=True, help_text='The email that belongs with this PGP Key.', max_length=254, null=True),
        ),
        migrations.AddField(
            model_name='vendornotificationemail',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='vendornotificationemail',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='email_gin'),
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER email_update_trigger\n            BEFORE INSERT OR UPDATE of subject, email_body, search_vector\n            ON vince_vendornotificationemail\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', subject, email_body);\n\n            UPDATE vince_vendornotificationemail SET search_vector = NULL;\n            ",
            reverse_sql='\n            DROP TRIGGER IF EXISTS email_update_trigger\n            ON vince_vendornotificationemail;\n            ',
        ),
        migrations.AddField(
            model_name='vinceemail',
            name='created',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='vinceemail',
            name='pgp_key_id',
            field=models.CharField(blank=True, max_length=500, null=True),
        ),
        migrations.CreateModel(
            name='MFAResetTicket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(help_text='The vincecomm user that requested the reset')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('ticket', models.ForeignKey(help_text='The ticket used for mfa tracking', on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket')),
            ],
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='modified',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='emailtemplate',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='plain_text',
            field=models.TextField(help_text='If related to a ticket, the context available to you includes {{ ticket }}, {{ queue }}, and depending on the time of the call: {{ resolution }} or {{ comment }}.', verbose_name='Plain Text'),
        ),
        migrations.AlterField(
            model_name='emailtemplate',
            name='subject',
            field=models.CharField(help_text='If related to a ticket action, This will be prefixed "[ticket.ticket] ticket.title". We recommend something simple such as "(Updated") or "(Closed)" - the same context is available as in plain_text, below.', max_length=100, verbose_name='Subject'),
        ),
        migrations.AlterField(
            model_name='phonecontact',
            name='phone_type',
            field=models.CharField(choices=[('Fax', 'Fax'), ('Home', 'Home'), ('Hotline', 'Hotline'), ('Office', 'Office'), ('Mobile', 'Mobile')], default='Office', max_length=20),
        ),
        migrations.CreateModel(
            name='TicketTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tag', models.CharField(help_text='The tag', max_length=50)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket', verbose_name='Ticket')),
                ('user', models.ForeignKey(blank=True, help_text='User that tags this ticket.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='usersettings',
            name='case_template',
            field=models.ForeignKey(blank=True, help_text='The default template to use when creating cases', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.CaseTemplate'),
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date', models.DateTimeField()),
                ('title', models.CharField(max_length=200, verbose_name='Event Title')),
                ('event_id', models.IntegerField(choices=[(1, 'Triage'), (2, 'Out of Office')], default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned', to=settings.AUTH_USER_MODEL)),
                ('user_added', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_added', to=settings.AUTH_USER_MODEL)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AlterField(
            model_name='artifact',
            name='description',
            field=models.TextField(blank=True, help_text='A description of this artifact.', null=True),
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=200)),
                ('group', models.ForeignKey(blank=True, help_text='Not required, but if left blank, will be a global role.', null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='UserAssignmentWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.IntegerField()),
                ('current_weight', models.IntegerField(default=0)),
                ('effective_weight', models.IntegerField()),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.UserRole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='VTDailyNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.IntegerField()),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.CaseAction')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
                ('followup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.FollowUp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VulNoteReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField()),
                ('feedback', models.TextField(blank=True, help_text='Feedback/Comments to the Author', null=True, verbose_name='Feedback')),
                ('marks', vince.models.OldJSONField(blank=True, null=True)),
                ('complete', models.BooleanField(default=False)),
                ('approve', models.BooleanField(default=False)),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket')),
                ('vulnote', models.ForeignKey(help_text='The revision of the vulnote being reviewed.', on_delete=django.db.models.deletion.CASCADE, to='vince.VulNoteRevision')),
                ('date_complete', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='artifact',
            name='file_hash',
            field=models.CharField(blank=True, help_text='The hash of the file', max_length=100, null=True),
        ),
        migrations.RemoveField(
            model_name='ticketqueue',
            name='sqs_url',
        ),
        migrations.AddField(
            model_name='casepermissions',
            name='publish',
            field=models.BooleanField(default=True, verbose_name='publish permissions'),
        ),
        migrations.AddField(
            model_name='queuepermissions',
            name='publish',
            field=models.BooleanField(default=True, verbose_name='queue publish access'),
        ),
        migrations.AddField(
            model_name='ticketqueue',
            name='from_email',
            field=models.CharField(blank=True, max_length=250, null=True, verbose_name='S3 Bucket Name for Email'),
        ),
        migrations.AlterField(
            model_name='ticketqueue',
            name='queue_type',
            field=models.IntegerField(choices=[(1, 'General Ticket'), (2, 'Case Request Queue'), (3, 'Case Task Queue'), (4, 'Other Queue')], default=1, verbose_name='Queue Type'),
        ),
        migrations.AddField(
            model_name='action',
            name='email_bucket',
            field=models.CharField(blank=True, help_text='If email-originated, bucket name here', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='action',
            name='email_id',
            field=models.CharField(blank=True, help_text='If email-originated, email ID here', max_length=150, null=True),
        ),
        migrations.AlterField(
            model_name='vulnote',
            name='ticket_to_approve',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket'),
        ),
        migrations.CreateModel(
            name='VulExploit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('reference_date', models.DateTimeField(blank=True, null=True)),
                ('link', models.URLField()),
                ('reference_type', models.CharField(choices=[('code', 'code'), ('report', 'report'), ('other', 'other')], default='code', max_length=30)),
                ('notes', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vul', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability')),
                ('publish', models.BooleanField(default=False)),
                ('share', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VulSSVC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state', models.IntegerField(choices=[(0, 'Undecided'), (1, 'POC'), (2, 'Active')], default=0)),
                ('automatable', models.BooleanField(default=False)),
                ('value_density', models.IntegerField(choices=[(0, 'Undecided'), (1, 'diffuse'), (2, 'concentrated')], default=0)),
                ('technical_impact', models.IntegerField(choices=[(0, 'Undecided'), (1, 'Partial'), (2, 'Total')], default=0)),
                ('vul', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability')),
                ('json_file', vince.models.OldJSONField(blank=True, null=True, verbose_name='SSVC JSON File')),
                ('decision', models.CharField(blank=True, max_length=50, null=True)),
                ('last_edit', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last Modified Date')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='vulnerablevendor',
            name='from_group',
            field=models.ForeignKey(blank=True, help_text='If this vendor was added from a group, add it here', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.ContactGroup'),
        ),
        migrations.CreateModel(
            name='VulCVSS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AV', models.CharField(max_length=2, verbose_name='Attack Vector')),
                ('AC', models.CharField(max_length=2, verbose_name='Attack Complexity')),
                ('PR', models.CharField(max_length=2, verbose_name='Privileges Required')),
                ('UI', models.CharField(max_length=2, verbose_name='User Interaction')),
                ('S', models.CharField(max_length=2, verbose_name='Scope')),
                ('C', models.CharField(max_length=2, verbose_name='Confidentiality')),
                ('I', models.CharField(max_length=2, verbose_name='Integrity')),
                ('A', models.CharField(max_length=2, verbose_name='Availability')),
                ('last_modified', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last Modified Date')),
                ('scored_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('vul', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability')),
                ('score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='CVSS Base Score')),
                ('severity', models.CharField(blank=True, max_length=20, null=True, verbose_name='CVSS Severity')),
                ('vector', models.CharField(blank=True, max_length=100, null=True, verbose_name='CVSS Vector String')),
                ('E', models.CharField(default='X', max_length=2, verbose_name='Exploit Code Maturity')),
                ('RC', models.CharField(default='X', max_length=2, verbose_name='Report Confidence')),
                ('RL', models.CharField(default='X', max_length=2, verbose_name='Remediation Level')),
            ],
        ),
        migrations.AddField(
            model_name='ticketqueue',
            name='team',
            field=models.ForeignKey(blank=True, help_text='Team Owner', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='usersettings',
            name='contacts_read',
            field=models.BooleanField(default=True, help_text='Does this user have permissions to read VINCE contacts'),
        ),
        migrations.AddField(
            model_name='usersettings',
            name='contacts_write',
            field=models.BooleanField(default=True, help_text='Does this user have permissions to add/edit VINCE contacts'),
        ),
        migrations.CreateModel(
            name='VinceReminder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_date', models.DateTimeField()),
                ('title', models.CharField(max_length=1000)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('case', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_by', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.Ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('create_ticket', models.BooleanField(default=False, help_text='Create a new ticket on a future date')),
                ('frequency', models.IntegerField(choices=[(0, 'None'), (1, 'Daily'), (7, 'Weekly'), (14, 'Biweekly'), (28, 'Monthly')], default=0, help_text='Recurrence of Reminder')),
            ],
        ),
        migrations.CreateModel(
            name='VulnerabilityTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tag', models.CharField(help_text='The tag', max_length=50)),
                ('user', models.ForeignKey(blank=True, help_text='User that created this tag.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('vulnerability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Vulnerability', verbose_name='Vulnerability')),
            ],
        ),
        migrations.CreateModel(
            name='ContactTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tag', models.CharField(help_text='The tag', max_length=50)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact', verbose_name='Contact')),
                ('user', models.ForeignKey(blank=True, help_text='User that tagged this contact.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='CaseTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tag', models.CharField(help_text='The tag', max_length=50)),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.VulnerabilityCase', verbose_name='Case')),
                ('user', models.ForeignKey(blank=True, help_text='User that tagged this case.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='TagManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_type', models.IntegerField(choices=[(1, 'Ticket'), (2, 'Contact'), (3, 'Case'), (4, 'Vulnerability')], default=1, verbose_name='Tag Type')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('tag', models.CharField(help_text='The tag', max_length=50)),
                ('alert_on_add', models.BooleanField(default=False, help_text='Alert user when adding this tag')),
                ('description', models.CharField(help_text='Description of tag', max_length=300)),
                ('team', models.ForeignKey(blank=True, help_text='Team Tag, otherwise global', null=True, on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('user', models.ForeignKey(blank=True, help_text='User that created this tag.', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='vulnerablevendor',
            name='tagged',
            field=models.ForeignKey(blank=True, help_text='Ticket dependency if vendor is tagged', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tagged', to='vince.Ticket'),
        ),
        migrations.AddField(
            model_name='vulnerabilitycase',
            name='team_owner',
            field=models.ForeignKey(blank=True, help_text='The team that owns this case', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group'),
        ),
        migrations.AddField(
            model_name='caserequest',
            name='ics_impact',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='adminpgpemail',
            name='email',
            field=models.CharField(help_text='Multiple emails should be separated by a comma and space', max_length=254, verbose_name='Email(s)'),
        ),
        migrations.CreateModel(
            name='ContactAssociation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.EmailField(help_text='The email of the user to verify.', max_length=254, verbose_name='User Email')),
                ('email', models.EmailField(help_text='The company email address to send to', max_length=254, verbose_name='Contact Email Address for Verification')),
                ('email_body', models.TextField(blank=True, help_text='The body of the email that will be sent to the above address for contact verification ', null=True)),
                ('complete', models.BooleanField(default=False)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='vince.Contact')),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket', verbose_name='Ticket')),
                ('approval_requested', models.BooleanField(default=False)),
                ('authorized_by', models.ForeignKey(blank=True, help_text='The user that authorized this request', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Authorizer', to=settings.AUTH_USER_MODEL)),
                ('initiated_by', models.ForeignKey(blank=True, help_text='The user that initiated the request', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterField(
            model_name='vulnerablevendor',
            name='addendum',
            field=models.TextField(blank=True, help_text='Text added by coordination team about this vendor.', null=True),
        ),
        migrations.CreateModel(
            name='GroupSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publish', models.BooleanField(default=True)),
                ('organization', models.CharField(blank=True, help_text='The name of the cognito group', max_length=50, null=True)),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
                ('contacts_read', models.BooleanField(default=True, help_text='Does this group have permissions to read VINCE contacts')),
                ('contacts_write', models.BooleanField(default=True, help_text='Does this group have permissions to add/edit VINCE contacts')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Contact')),
                ('vulnote_template', models.TextField(blank=True, null=True)),
                ('team_email', models.CharField(blank=True, help_text='Email address to use for outgoing email. If not set, uses DEFAULT_REPLY_EMAIL in settings', max_length=100, null=True)),
                ('team_signature', models.TextField(blank=True, help_text='Email signature for automatic case messages sent by VINCE to case participants', null=True)),
            ],
        ),
        migrations.AddField(
            model_name='caseparticipant',
            name='contact',
            field=models.ForeignKey(blank=True, help_text='If this is a vendor/group, then link them here', null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Contact'),
        ),
        migrations.AlterField(
            model_name='caseparticipant',
            name='group',
            field=models.BooleanField(default=False, help_text='Is this a vendor/group?'),
        ),
        migrations.AddField(
            model_name='vulnoterevision',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='vulnoterevision',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='vulnote_gin'),
        ),
        migrations.RunSQL(
            sql="                                                                               \n            CREATE TRIGGER vulnote_update_trigger\n            BEFORE INSERT OR UPDATE of content, title, search_vector                         \n            ON vince_vulnoterevision                                                      \n            FOR EACH ROW EXECUTE PROCEDURE                                                        \n            tsvector_update_trigger(search_vector, 'pg_catalog.english', content, title);\n                                                                                                  \n            UPDATE vince_vulnoterevision SET search_vector = NULL;                        \n            ",
            reverse_sql='                                                                     \n            DROP TRIGGER IF EXISTS vulnote_update_trigger                                           \n            ON vince_vulnoterevision;                                                     \n            ',
        ),
        migrations.AlterField(
            model_name='contactassociation',
            name='email',
            field=models.CharField(help_text='The company email address to send to. Multiple emails should be separated by a comma', max_length=1000, verbose_name='Contact Email Address(es) for Verification.'),
        ),
        migrations.AlterField(
            model_name='casetemplate',
            name='participant_email',
            field=models.TextField(default='Hello, VINCE coordinators invite you to participate in an active vulnerability disclosure case. Please login to the VINCE portal for more information about this case.', help_text='The context available to you includes {{ vu }}, {{ title }}, and {{ owner }}.', verbose_name='Participant Notification Email Content'),
        ),
        migrations.AlterField(
            model_name='cveallocation',
            name='assigner',
            field=models.EmailField(default='vuls@vince.org', max_length=254),
        ),
        migrations.AddField(
            model_name='vincefile',
            name='post',
            field=models.ForeignKey(blank=True, help_text='Post file was added to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='vince.VendorNotificationContent'),
        ),
        migrations.AddField(
            model_name='groupsettings',
            name='disclosure_link',
            field=models.URLField(blank=True, help_text='Link to disclosure guidance that will be presented to case members at first view of case', null=True),
        ),
        migrations.CreateModel(
            name='CWEDescriptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cwe', models.CharField(max_length=1000)),
            ],
        ),
        migrations.AddField(
            model_name='cveallocation',
            name='date_public',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date Public'),
        ),
        migrations.AddField(
            model_name='cveaffectedproduct',
            name='version_affected',
            field=models.CharField(blank=True, max_length=10, null=True, verbose_name='Version Affected'),
        ),
        migrations.AlterField(
            model_name='cveallocation',
            name='title',
            field=models.CharField(blank=True, max_length=200, null=True, verbose_name='Title'),
        ),
        migrations.CreateModel(
            name='CVEServicesAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(help_text='Organization registered with CVE Services', max_length=200, verbose_name='Organization')),
                ('api_key', models.CharField(help_text='API Key', max_length=100, verbose_name='API Key')),
                ('email', models.EmailField(help_text='Email associated with the account', max_length=254, verbose_name='Email')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('active', models.BooleanField(default=True)),
                ('team', models.ForeignKey(help_text='VINCE Team', on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='CVEReservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cve_id', models.CharField(max_length=50)),
                ('time_reserved', models.DateTimeField(default=django.utils.timezone.now)),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.CVEServicesAccount')),
                ('cve_info', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.CVEAllocation')),
                ('user_reserved', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='groupsettings',
            name='cna_email',
            field=models.CharField(blank=True, help_text='Email address used for CVE assignment', max_length=100, null=True),
        ),
        migrations.RunSQL(
            sql='\n            DROP TRIGGER IF EXISTS cve_update_trigger                                                              \n            ON vince_cveallocation;                                                                                \n            ',
        ),
        migrations.AlterField(
            model_name='cveallocation',
            name='description',
            field=models.TextField(verbose_name='Description'),
        ),
        migrations.RunSQL(
            sql="                                                                                                \n            CREATE TRIGGER cve_update_trigger                                                                      \n            BEFORE INSERT OR UPDATE of title, assigner, cve_name, description, resolution, credit, search_vector   \n                                                                                                                   \n            ON vince_cveallocation                                                                                 \n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(search_vector, 'pg_catalog.english', title, assigner, cve_name, description, resolution, credit);\n            UPDATE vince_cveallocation SET search_vector = NULL;                                                   \n            ",
            reverse_sql='                                                                                      \n            DROP TRIGGER IF EXISTS cve_update_trigger                                                              \n            ON vince_cveallocation;                                                                                \n            ',
        ),
        migrations.AddField(
            model_name='contactassociation',
            name='restart',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='action',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='assigned_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Assigned to'),
        ),
        migrations.CreateModel(
            name='BounceEmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=320)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('bounce_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('bounce_type', models.IntegerField(choices=[(0, 'Transient'), (1, 'Permanent')], default=0, verbose_name='Bounce Type')),
                ('subject', models.TextField(blank=True, null=True)),
                ('action_taken', models.BooleanField(default=False)),
                ('ticket', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='vince.Ticket')),
            ],
        ),
    ]
